---
# Source: danube-helm-chart/templates/ConfigMap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: danube-broker-config
data:
  danube_broker.yml: |
    
    cluster_name: "MY_CLUSTER"
    broker_host: "0.0.0.0"
    broker_port: 6650
    admin_port: 50051
    prom_port: 9040
    meta_store_host: "etcd"
    meta_store_port: 2379
    bootstrap_namespaces: ["default"]
    policies:
      max_producers_per_topic: 0
      max_subscriptions_per_topic: 0
      max_consumers_per_topic: 0
      max_consumers_per_subscription: 0
      max_publish_rate: 0
      max_dispatch_rate: 0
      max_subscription_dispatch_rate: 0
      max_message_size: 10485760
---
# Source: danube-helm-chart/templates/broker-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-name-danube-broker1
  labels:
    app: my-release-name-danube
    instance: broker1
spec:
  type: ClusterIP
  ports:
    - name: brokerPort
      port: 6650
      targetPort: 6650
    - name: adminPort
      port: 50051
      targetPort: 50051
    - name: prometheusPort
      port: 9040
      targetPort: 9040
  selector:
    app: my-release-name-danube
    instance: broker1
apiVersion: v1
kind: Service
metadata:
  name: my-release-name-danube-broker2
  labels:
    app: my-release-name-danube
    instance: broker2
spec:
  type: ClusterIP
  ports:
    - name: brokerPort
      port: 6650
      targetPort: 6650
    - name: adminPort
      port: 50051
      targetPort: 50051
    - name: prometheusPort
      port: 9040
      targetPort: 9040
  selector:
    app: my-release-name-danube
    instance: broker2
apiVersion: v1
kind: Service
metadata:
  name: my-release-name-danube-broker3
  labels:
    app: my-release-name-danube
    instance: broker3
spec:
  type: ClusterIP
  ports:
    - name: brokerPort
      port: 6650
      targetPort: 6650
    - name: adminPort
      port: 50051
      targetPort: 50051
    - name: prometheusPort
      port: 9040
      targetPort: 9040
  selector:
    app: my-release-name-danube
    instance: broker3
---
# Source: danube-helm-chart/templates/etcd-service.yaml
apiVersion: v1
kind: Service
metadata:
  name:  my-release-name-etcd
  labels:
    app:  my-release-name-etcd
    release: my-release-name
spec:
  type: ClusterIP
  ports:
    - port: 2379
      targetPort: 2379
  selector:
    app:  my-release-name-etcd
    release: my-release-name
---
# Source: danube-helm-chart/templates/broker-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-name-danube-broker1
  labels:
    app: my-release-name-danube
    instance: broker1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-release-name-danube
      instance: broker1
  template:
    metadata:
      labels:
        app: my-release-name-danube
        instance: broker1
    spec:
      containers:
        - name: danube-helm-chart
          image: "ghcr.io/danrusei/danube-broker:latest"
          imagePullPolicy: IfNotPresent
          command: ["/usr/local/bin/danube-broker"]
          args: ["--config-file", "/etc/danube_broker.yml"]
          ports:
            - containerPort: 6650
              name: brokerPort
            - containerPort: 50051
              name: adminPort
            - containerPort: 9040
              name: prometheusPort
          volumeMounts:
            - name: config-volume
              mountPath: "/etc/danube_broker.yml"
              subPath: "danube_broker.yml"
          env:
            - name: RUST_LOG
              value: danube_broker=info
            - name: BROKER_ADDR
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: META_STORE_ADDR
              value: my-release-name-etcd:2379
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 200m
              memory: 256Mi
      volumes:
        - name: config-volume
          configMap:
            name: danube-broker-config
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-name-danube-broker2
  labels:
    app: my-release-name-danube
    instance: broker2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-release-name-danube
      instance: broker2
  template:
    metadata:
      labels:
        app: my-release-name-danube
        instance: broker2
    spec:
      containers:
        - name: danube-helm-chart
          image: "ghcr.io/danrusei/danube-broker:latest"
          imagePullPolicy: IfNotPresent
          command: ["/usr/local/bin/danube-broker"]
          args: ["--config-file", "/etc/danube_broker.yml"]
          ports:
            - containerPort: 6650
              name: brokerPort
            - containerPort: 50051
              name: adminPort
            - containerPort: 9040
              name: prometheusPort
          volumeMounts:
            - name: config-volume
              mountPath: "/etc/danube_broker.yml"
              subPath: "danube_broker.yml"
          env:
            - name: RUST_LOG
              value: danube_broker=info
            - name: BROKER_ADDR
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: META_STORE_ADDR
              value: my-release-name-etcd:2379
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 200m
              memory: 256Mi
      volumes:
        - name: config-volume
          configMap:
            name: danube-broker-config
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-name-danube-broker3
  labels:
    app: my-release-name-danube
    instance: broker3
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-release-name-danube
      instance: broker3
  template:
    metadata:
      labels:
        app: my-release-name-danube
        instance: broker3
    spec:
      containers:
        - name: danube-helm-chart
          image: "ghcr.io/danrusei/danube-broker:latest"
          imagePullPolicy: IfNotPresent
          command: ["/usr/local/bin/danube-broker"]
          args: ["--config-file", "/etc/danube_broker.yml"]
          ports:
            - containerPort: 6650
              name: brokerPort
            - containerPort: 50051
              name: adminPort
            - containerPort: 9040
              name: prometheusPort
          volumeMounts:
            - name: config-volume
              mountPath: "/etc/danube_broker.yml"
              subPath: "danube_broker.yml"
          env:
            - name: RUST_LOG
              value: danube_broker=info
            - name: BROKER_ADDR
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: META_STORE_ADDR
              value: my-release-name-etcd:2379
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 200m
              memory: 256Mi
      volumes:
        - name: config-volume
          configMap:
            name: danube-broker-config
---
# Source: danube-helm-chart/templates/etcd-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-name-etcd
  labels:
    app:  my-release-name-etcd
    chart: danube-helm-chart-0.1.4
    release: my-release-name
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app:  my-release-name-etcd
      release: my-release-name
  template:
    metadata:
      labels:
        app:  my-release-name-etcd
        release: my-release-name
    spec:
      containers:
        - name: etcd
          image: "bitnami/etcd:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 2379
          env:
            - name: ALLOW_NONE_AUTHENTICATION
              value: "yes"
            - name: ETCD_ADVERTISE_CLIENT_URLS
              value: "http://0.0.0.0:2379"
            - name: ETCD_LISTEN_CLIENT_URLS
              value: "http://0.0.0.0:2379"
---
# Source: danube-helm-chart/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-name-danube-ingress
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
spec:
  ingressClassName: nginx
  rules:
    - host: broker1.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: my-release-name-danube-broker1
                port:
                  number: 6650
    - host: broker2.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: my-release-name-danube-broker2
                port:
                  number: 6650
    - host: broker3.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: my-release-name-danube-broker3
                port:
                  number: 6650

    # Admin API routing for all brokers
    - host: broker1.example.com
      http:
        paths:
          - path: /broker1
            pathType: Prefix
            backend:
              service:
                name: my-release-name-danube-broker1
                port:
                  number: 50051
          - path: /broker2
            pathType: Prefix
            backend:
              service:
                name: my-release-name-danube-broker2
                port:
                  number: 50051
          - path: /broker3
            pathType: Prefix
            backend:
              service:
                name: my-release-name-danube-broker3
                port:
                  number: 50051
